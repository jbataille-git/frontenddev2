// pad naar jest: D:\data\winc\27_test\node_modules\.bin\jest.cmd
// run in watch  mode: $ npm run test -- --watch
// of
// .\node_modules\.bin\jest --watch test

const { test, expect } = require("@jest/globals");
const functions = require("./functions");

test("Adds 2 + 2 to be equal 4", () => {
  expect(functions.add(2, 2)).toBe(4); // toBe heet de 'matcher', er zijn er veel van
});

test("Adds 2 + 2 to NOT equal 5", () => {
  expect(functions.add(2, 2)).not.toBe(5);
});

// CHECK FOR TRUTHY & FALSY VALUES
// toBeNull matches only null
// toBeUndefined matches only undefined
// toBeDefined is the opposite of toBeUndefined
// toBeTruthy matches anything that an if statement treats as true
// toBeFalsy matches anything that an if statement treats as false

// toBeNull
test("Should be null", () => {
  expect(functions.isNull("cc")).toBeNull(); // will pass because isNull always returns null
});

// toBeFalsy
test("Should be falsy", () => {
  expect(functions.checkValue(undefined)).toBeFalsy(); // will pass
});

// toEqual object user
// gebruik voor objecten toEqual, toBe is voor simpele waarden
test("User should be Brad Traversy object", () => {
  expect(functions.createUser()).toEqual({
    firstName: 'Bradw',
    lastName: 'Traversy'
  })
});

// andere matchers 
test('Should be under 1600', () => {
  const load1 = 800;
  const load2 = 700;
  expect(load1 + load2).toBeLessThan(1600);
})

// less than 
test("Should be under or equal 1600", () => {
  const load1 = 800;
  const load2 = 800;
  expect(load1 + load2).toBeLessThanOrEqual(1600);
});

// Regex
test('There is no I in team', () => {
  expect('team').not.toMatch(/I/);
});

// Arrays toContain
test('Admin shoud be in usernames', () => {
  usernames = ['john', 'karen', 'admin'];
  expect(usernames).toContain('admin');
})











